require('chai').should();
var pad = require('../index.js');

function randomString()
{
    var text = '';
    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

    for(var i = 0; i < Math.floor(Math.random()*100); i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
}
  
describe('String padding', function(){
	var mock = [];
	for (var i = 1000; i >= 0; i--) {
		mock.push(randomString());
	}
	var string = 'a random string';
		
 	it ('should return the original string',function(){
 		mock.forEach(function(string){
 			var len = string.length,
 			delta   = 1 + Math.floor(Math.random()*(len-1));

	 		pad(string).should.equal(string);
	 		pad(string,len).should.equal(string);
	 		pad(string,len - delta).should.equal(string);
 		});
	});

	it('should pad right by default', function(){
		mock.forEach(function(string){
			var len = string.length,
				delta = 1 + Math.floor(Math.random()*100),
				result = pad(string, string.length+delta);
			result.should.have.length(len+delta);
			result.slice(0, len).should.equal(string);
			[' '].should.include.members(result.slice(len).split(''));
			
		});
	});
	it('should pad right by default with character', function(){
		mock.forEach(function(string){
			var len = string.length,
				delta = 1 + Math.floor(Math.random()*100),
				result = pad(string, string.length+delta, '_');
			result.should.have.length(len+delta);
			result.slice(0, len).should.equal(string);
			['_'].should.include.members(result.slice(len).split(''));
		});
	});
	it('should be able to pad left', function(){
		mock.forEach(function(string){
			var len = string.length,
				delta = 1 + Math.floor(Math.random()*100),
				result = pad(string, string.length+delta, 'LEFT');
			result.should.have.length(len+delta);
			result.slice(delta).should.equal(string);
			[' '].should.include.members(result.slice(0, delta).split(''));
			
		});
	});
	it('should be able to pad both', function(){
		mock.forEach(function(string){
			var len = string.length,
				delta = 1 + Math.floor(Math.random()*100),
				left = delta - Math.ceil(delta / 2),
				result = pad(string, string.length+delta, 'BOTH');
			result.should.have.length(len+delta);
			result.slice(left, left+len).should.equal(string);
			[' '].should
			.include.members(result.slice(0, left).split(''))
			.include.members(result.slice(left+len).split(''));
		});
	});
});